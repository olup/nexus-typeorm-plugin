### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Category {
  id: ID!
  name: String!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  id: ID
  id_in: [ID!]
  name: String
  name_contains: String
  name_in: [String!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
}

input CreateCategoriesWithoutPostsInput {
  name: String!
  posts: CreateManyPostsWithoutCategoryInput
}

input CreateManyCategoriesWithoutPostInput {
  connect: CategoryWhereInput
  create: [CreateCategoriesWithoutPostsInput!]
}

input CreateManyCategoriesWithoutUserInput {
  connect: CategoryWhereInput
  create: [CreateCategoriesWithoutPostsInput!]
}

input CreateManyPostsWithoutCategoryInput {
  connect: PostWhereInput
  create: [CreatePostsWithoutCategoriesInput!]
}

input CreateManyPostsWithoutUserInput {
  connect: PostWhereInput
  create: [CreatePostsWithoutAuthorInput!]
}

input CreateManyUsersWithoutPostInput {
  connect: UserWhereInput
  create: CreateUsersWithoutPostsInput
}

input CreatePostsWithoutAuthorInput {
  author: CreateManyUsersWithoutPostInput
  categories: CreateManyCategoriesWithoutPostInput
  title: String!
}

input CreatePostsWithoutCategoriesInput {
  author: CreateManyUsersWithoutPostInput
  categories: CreateManyCategoriesWithoutPostInput
  title: String!
}

input CreateUsersWithoutPostsInput {
  age: Int!
  categories: CreateManyCategoriesWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  createOneUser(data: UserCreateInput!): User!
}

type Post {
  author: User!
  categories(first: Int, last: Int, orderBy: [CategoryOrderByInput!], skip: Int, where: CategoryWhereInput): [Category!]!
  id: ID!
  title: String!
}

enum PostOrderByInput {
  author_ASC
  author_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  id: ID
  id_in: [ID!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  title: String
  title_contains: String
  title_in: [String!]
}

type Query {
  listPostsWithCategoryFoo(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
  listUsers(first: Int, last: Int, orderBy: [UserOrderByInput!], skip: Int, where: UserWhereInput): [User!]!
  listUsersWithNameJohn(first: Int, last: Int, orderBy: [UserOrderByInput!], skip: Int, where: UserWhereInput): [User!]!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
}

type User {
  age: Int!
  categories(first: Int, last: Int, orderBy: [CategoryOrderByInput!], skip: Int, where: CategoryWhereInput): [Category!]!
  id: ID!
  name: String!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
}

input UserCreateInput {
  age: Int!
  categories: CreateManyCategoriesWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
}

enum UserOrderByInput {
  age_ASC
  age_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input UserWhereInput {
  age: Int
  age_gt: Int
  age_gte: Int
  age_in: [Int!]
  age_lt: Int
  age_lte: Int
  AND: [UserWhereInput!]
  id: ID
  id_in: [ID!]
  name: String
  name_contains: String
  name_in: [String!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}
