// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Schema schema.grapqhl snapshot 1`] = `
"### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Category {
  id: ID!
  name: String!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
}

input CategoryCreateInput {
  name: String!
  posts: CreateManyPostsWithoutCategoryInput
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  id: ID
  id_in: [ID!]
  name: String
  name_contains: String
  name_in: [String!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
}

input CreateCategoriesWithoutPostsInput {
  name: String!
  posts: CreateManyPostsWithoutCategoryInput
}

input CreateEmailsWithoutUserInput {
  address: String!
  user: CreateManyUsersWithoutEmailInput
}

input CreateManyCategoriesWithoutPostInput {
  connect: CategoryWhereInput
  create: [CreateCategoriesWithoutPostsInput!]
}

input CreateManyEmailsWithoutUserInput {
  connect: EmailWhereInput
  create: CreateEmailsWithoutUserInput
}

input CreateManyPostsWithoutCategoryInput {
  connect: PostWhereInput
  create: [CreatePostsWithoutCategoriesInput!]
}

input CreateManyPostsWithoutUserInput {
  connect: PostWhereInput
  create: [CreatePostsWithoutUserInput!]
}

input CreateManyPostsWithoutUserLikesPostInput {
  connect: PostWhereInput
  create: CreatePostsWithoutUserLikesPostsInput
}

input CreateManyUserFollowsWithoutUserInput {
  connect: UserFollowsWhereInput
  create: [CreateUserFollowsWithoutFolloweeInput!]
}

input CreateManyUserLikesPostsWithoutPostInput {
  connect: UserLikesPostWhereInput
  create: [CreateUserLikesPostsWithoutPostInput!]
}

input CreateManyUserLikesPostsWithoutUserInput {
  connect: UserLikesPostWhereInput
  create: [CreateUserLikesPostsWithoutUserInput!]
}

input CreateManyUserProfilesWithoutUserInput {
  connect: UserProfileWhereInput
  create: CreateUserProfilesWithoutUserInput
}

input CreateManyUsersWithoutEmailInput {
  connect: UserWhereInput
  create: CreateUsersWithoutEmailInput
}

input CreateManyUsersWithoutPostInput {
  connect: UserWhereInput
  create: CreateUsersWithoutPostsInput
}

input CreateManyUsersWithoutUserFollowsInput {
  connect: UserWhereInput
  create: CreateUsersWithoutFolloweesInput
}

input CreateManyUsersWithoutUserLikesPostInput {
  connect: UserWhereInput
  create: CreateUsersWithoutPostsInput
}

input CreateManyUsersWithoutUserProfileInput {
  connect: UserWhereInput
  create: CreateUsersWithoutProfileInput
}

input CreatePostsWithoutCategoriesInput {
  categories: CreateManyCategoriesWithoutPostInput
  createdAt: DateTime
  isPublic: Boolean!
  liked: String
  title: String!
  totalLikes: Int
  user: CreateManyUsersWithoutPostInput
  userId: Int
  userLikesPosts: CreateManyUserLikesPostsWithoutPostInput
  viewCount: Int
}

input CreatePostsWithoutUserInput {
  categories: CreateManyCategoriesWithoutPostInput
  createdAt: DateTime
  isPublic: Boolean!
  liked: String
  title: String!
  totalLikes: Int
  user: CreateManyUsersWithoutPostInput
  userLikesPosts: CreateManyUserLikesPostsWithoutPostInput
  viewCount: Int
}

input CreatePostsWithoutUserLikesPostsInput {
  categories: CreateManyCategoriesWithoutPostInput
  createdAt: DateTime
  isPublic: Boolean!
  liked: String
  title: String!
  totalLikes: Int
  user: CreateManyUsersWithoutPostInput
  userId: Int
  userLikesPosts: CreateManyUserLikesPostsWithoutPostInput
  viewCount: Int
}

input CreateUserFollowsWithoutFolloweeInput {
  followee: CreateManyUsersWithoutUserFollowsInput
  follower: CreateManyUsersWithoutUserFollowsInput
  followerId: Int!
}

input CreateUserLikesPostsWithoutPostInput {
  post: CreateManyPostsWithoutUserLikesPostInput
  user: CreateManyUsersWithoutUserLikesPostInput
  userId: Int!
}

input CreateUserLikesPostsWithoutUserInput {
  post: CreateManyPostsWithoutUserLikesPostInput
  postId: Int!
  user: CreateManyUsersWithoutUserLikesPostInput
}

input CreateUserProfilesWithoutUserInput {
  displayName: String!
  slug: String!
  user: CreateManyUsersWithoutUserProfileInput
}

input CreateUsersWithoutEmailInput {
  age: Int
  email: CreateManyEmailsWithoutUserInput
  followees: CreateManyUserFollowsWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
  profile: CreateManyUserProfilesWithoutUserInput
  type: UserTypeEnum!
  userLikesPosts: CreateManyUserLikesPostsWithoutUserInput
}

input CreateUsersWithoutFolloweesInput {
  age: Int
  email: CreateManyEmailsWithoutUserInput
  followees: CreateManyUserFollowsWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
  profile: CreateManyUserProfilesWithoutUserInput
  type: UserTypeEnum!
  userLikesPosts: CreateManyUserLikesPostsWithoutUserInput
}

input CreateUsersWithoutPostsInput {
  age: Int
  email: CreateManyEmailsWithoutUserInput
  followees: CreateManyUserFollowsWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
  profile: CreateManyUserProfilesWithoutUserInput
  type: UserTypeEnum!
  userLikesPosts: CreateManyUserLikesPostsWithoutUserInput
}

input CreateUsersWithoutProfileInput {
  age: Int
  email: CreateManyEmailsWithoutUserInput
  followees: CreateManyUserFollowsWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
  profile: CreateManyUserProfilesWithoutUserInput
  type: UserTypeEnum!
  userLikesPosts: CreateManyUserLikesPostsWithoutUserInput
}

\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
\`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

type Email {
  address: String!
  id: ID!
  user: User!
}

input EmailWhereInput {
  address: String
  address_contains: String
  address_in: [String!]
  AND: [EmailWhereInput!]
  id: ID
  id_in: [ID!]
  NOT: [EmailWhereInput!]
  OR: [EmailWhereInput!]
}

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
}

type Post {
  categories(first: Int, last: Int, orderBy: [CategoryOrderByInput!], skip: Int, where: CategoryWhereInput): [Category!]!
  createdAt: DateTime!
  id: ID!
  isPublic: Boolean!
  liked: String
  title: String!
  totalLikes: Int
  user: User!
  userId: Int
  userLikesPosts(first: Int, last: Int, orderBy: [UserLikesPostOrderByInput!], skip: Int, where: UserLikesPostWhereInput): [UserLikesPost!]!
  viewCount: Int
}

input PostCreateInput {
  categories: CreateManyCategoriesWithoutPostInput
  createdAt: DateTime
  isPublic: Boolean!
  liked: String
  title: String!
  totalLikes: Int
  user: CreateManyUsersWithoutPostInput
  userId: Int
  userLikesPosts: CreateManyUserLikesPostsWithoutPostInput
  viewCount: Int
}

enum PostOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isPublic_ASC
  isPublic_DESC
  liked_ASC
  liked_DESC
  title_ASC
  title_DESC
  totalLikes_ASC
  totalLikes_DESC
  userId_ASC
  userId_DESC
  viewCount_ASC
  viewCount_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  createdAt: DateTime
  createdAt_in: [DateTime!]
  id: ID
  id_in: [ID!]
  isPublic: Boolean
  isPublic_in: [Boolean!]
  liked: String
  liked_contains: String
  liked_in: [String!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  title: String
  title_contains: String
  title_in: [String!]
  totalLikes: Int
  totalLikes_gt: Int
  totalLikes_gte: Int
  totalLikes_in: [Int!]
  totalLikes_lt: Int
  totalLikes_lte: Int
  userId: Int
  userId_gt: Int
  userId_gte: Int
  userId_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  viewCount: Int
  viewCount_gt: Int
  viewCount_gte: Int
  viewCount_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
}

type Query {
  category(orderBy: [CategoryOrderByInput!], where: CategoryWhereInput): Category!
  post(orderBy: [PostOrderByInput!], where: PostWhereInput): Post!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
  postsByCategoryId(categoryId: String!, first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
  user(orderBy: [UserOrderByInput!], where: UserWhereInput): User!
  users(first: Int, last: Int, orderBy: [UserOrderByInput!], skip: Int, where: UserWhereInput): [User!]!
  usersByName(first: Int, last: Int, name: String!, orderBy: [UserOrderByInput!], skip: Int, where: UserWhereInput): [User!]!
}

type User {
  age: Int
  email: Email!
  followees(first: Int, last: Int, orderBy: [UserFollowsOrderByInput!], skip: Int, where: UserFollowsWhereInput): [UserFollows!]!
  followers(first: Int, last: Int, orderBy: [UserFollowsOrderByInput!], skip: Int, where: UserFollowsWhereInput): [User!]!
  id: ID!
  name: String!
  posts(first: Int, last: Int, orderBy: [PostOrderByInput!], skip: Int, where: PostWhereInput): [Post!]!
  profile: UserProfile!
  type: UserTypeEnum!
  userLikesPosts(first: Int, last: Int, orderBy: [UserLikesPostOrderByInput!], skip: Int, where: UserLikesPostWhereInput): [UserLikesPost!]!
}

input UserCreateInput {
  age: Int
  email: CreateManyEmailsWithoutUserInput
  followees: CreateManyUserFollowsWithoutUserInput
  name: String!
  posts: CreateManyPostsWithoutUserInput
  profile: CreateManyUserProfilesWithoutUserInput
  type: UserTypeEnum!
  userLikesPosts: CreateManyUserLikesPostsWithoutUserInput
}

type UserFollows {
  followee: User!
  followeeId: Int!
  follower: User!
  followerId: Int!
  id: ID!
}

enum UserFollowsOrderByInput {
  followeeId_ASC
  followeeId_DESC
  followerId_ASC
  followerId_DESC
  id_ASC
  id_DESC
}

input UserFollowsWhereInput {
  AND: [UserFollowsWhereInput!]
  followeeId: Int
  followeeId_gt: Int
  followeeId_gte: Int
  followeeId_in: [Int!]
  followeeId_lt: Int
  followeeId_lte: Int
  followerId: Int
  followerId_gt: Int
  followerId_gte: Int
  followerId_in: [Int!]
  followerId_lt: Int
  followerId_lte: Int
  id: ID
  id_in: [ID!]
  NOT: [UserFollowsWhereInput!]
  OR: [UserFollowsWhereInput!]
}

type UserLikesPost {
  id: ID!
  post: Post!
  postId: Int!
  user: User!
  userId: Int!
}

enum UserLikesPostOrderByInput {
  id_ASC
  id_DESC
  postId_ASC
  postId_DESC
  userId_ASC
  userId_DESC
}

input UserLikesPostWhereInput {
  AND: [UserLikesPostWhereInput!]
  id: ID
  id_in: [ID!]
  NOT: [UserLikesPostWhereInput!]
  OR: [UserLikesPostWhereInput!]
  postId: Int
  postId_gt: Int
  postId_gte: Int
  postId_in: [Int!]
  postId_lt: Int
  postId_lte: Int
  userId: Int
  userId_gt: Int
  userId_gte: Int
  userId_in: [Int!]
  userId_lt: Int
  userId_lte: Int
}

enum UserOrderByInput {
  age_ASC
  age_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
}

type UserProfile {
  displayName: String!
  id: ID!
  slug: String!
  user: User!
  userId: Int!
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  displayName: String
  displayName_contains: String
  displayName_in: [String!]
  id: ID
  id_in: [ID!]
  NOT: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  slug: String
  slug_contains: String
  slug_in: [String!]
  userId: Int
  userId_gt: Int
  userId_gte: Int
  userId_in: [Int!]
  userId_lt: Int
  userId_lte: Int
}

enum UserTypeEnum {
  ADMIN
  NORMAL
}

input UserWhereInput {
  age: Int
  age_gt: Int
  age_gte: Int
  age_in: [Int!]
  age_lt: Int
  age_lte: Int
  AND: [UserWhereInput!]
  id: ID
  id_in: [ID!]
  name: String
  name_contains: String
  name_in: [String!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  type: UserTypeEnum
  type_in: [UserTypeEnum!]
}
"
`;
